{"name": "修改员工信息接口", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [401]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Sayuri\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\Sayuri\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002971A7EEBF0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\Sayuri\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.admin.test_admin.TestAdmin object at 0x000002971D15F520>\ndata = {'case_info': {'json': {'id': 2, 'idNumber': '441423200105160031', 'name': '冯源祥', 'phone': '17820064773', ...}}, 'requ...title': '修改员工信息接口', 'headers': {'Connection': 'keep-alive', 'token': None}, 'method': 'PUT', 'url': '/admin/employee'}}\nfetch_token = {'token': None}\n\n    @pytest.mark.parametrize(\"data\", YamlUtil().extract_case(\"update_employee.yaml\", \"add\"))\n    def test_update(self, data, fetch_token):\n>       AdminApiService().handle_case(data, fetch_token)\n\ntest_admin.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\core\\AdminApiService.py:36: in handle_case\n    response = self.restClient.do_request(url=url, method=method, headers=headers, **case_info)\n..\\..\\core\\rest_client.py:18: in do_request\n    response = self.request(url, method, **kwargs).json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [401]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "attachments": [{"name": "log", "source": "0c224ee5-ac37-4290-94bb-5a90eabc50a7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'request_info': {'case_title': '修改员工信息接口', 'url': '/admin/employee', 'method': 'PUT', 'headers': {'Connection': 'keep-alive'}}, 'case_info': {'json': {'id': 2, 'idNumber': '441423200105160031', 'name': '冯源祥', 'phone': '17820064773', 'sex': '1', 'username': 'fyx'}, 'validate': [{'equal': ['$.code', 1]}]}}"}], "start": 1711724767009, "stop": 1711724767016, "uuid": "4dea25d3-d7e6-4e50-b42e-137e8e263e05", "historyId": "deb1302fc203373343dcf28db009a1d0", "testCaseId": "72ba415a11d5f2654bb8fb81ad69683f", "fullName": "testcase.admin.test_admin.TestAdmin#test_update", "labels": [{"name": "feature", "value": "员工相关模块"}, {"name": "parentSuite", "value": "testcase.admin"}, {"name": "suite", "value": "test_admin"}, {"name": "subSuite", "value": "TestAdmin"}, {"name": "host", "value": "DESKTOP-J4J3RAP"}, {"name": "thread", "value": "6864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.admin.test_admin"}]}